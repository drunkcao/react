{"version":3,"sources":["pages/context.js","xueli0930/Input.js","components/control.js","xueli0930/List.js","xueli0930/TodoList.js","index.js"],"names":["React","createContext","Input","Component","htmlFor","id","ref","inp","input","value","this","props","inpValue","type","onChange","handleChange","onClick","addTodo","List","arr1","todos","filter","item","done","arr2","length","renderTodos","TodoList","e","setState","target","state","title","delTodo","idx","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","dangerouslySetInnerHTML","__html","localStorage","getItem","setItem","className","ReactDOM","render","document","getElementById"],"mappings":"uLAEcA,IAAMC,gB,kCCiBLC,GCdOC,Y,uKDFR,IAAD,OACL,OACI,6BACI,2BAAOC,QAAQ,OAAf,YACA,2BACIC,GAAG,MACHC,IAAK,SAAAC,GAAG,OAAE,EAAKC,MAAQD,GACvBE,MAAOC,KAAKC,MAAMC,SAClBC,KAAK,OACLC,SAAUJ,KAAKC,MAAMI,eAEzB,4BAAQC,QAASN,KAAKC,MAAMM,SAA5B,qB,GAZId,cEACe,E,uKAEb,IAAIC,EAAOT,KAAKC,MAAMS,MAAMC,QAAQ,SAAAC,GAAI,OAAKA,EAAKC,QAC9CC,EAAOd,KAAKC,MAAMS,MAAMC,QAAQ,SAAAC,GAAI,OAAIA,EAAKC,QACjD,OACI,6BACI,uDAASJ,EAAKM,QACd,4BACKf,KAAKC,MAAMe,aAAY,IAE5B,uDAASF,EAAKC,QACd,4BACKf,KAAKC,MAAMe,aAAY,S,GAZVvB,aCkHnBwB,E,kDA7GX,aAAc,IAAD,8BACT,gBAMJZ,aAAe,SAACa,GACZ,EAAKC,SAAS,CAACjB,SAASgB,EAAEE,OAAOrB,SARxB,EAyBbQ,QAAU,WACkB,IAArB,EAAKc,MAAMnB,WAGd,EAAKiB,SAAS,CACVT,MAAM,CACF,CACIY,MAAO,EAAKD,MAAMnB,SAClBW,MAAM,IAHT,mBAKE,EAAKQ,MAAMX,UAGtB,EAAKS,SAAS,CAACjB,SAAS,OAtCf,EAyCbqB,QAAU,SAACC,GAIP,EAAKL,SAAS,CACVT,MAAO,EAAKW,MAAMX,MAAMC,QAAO,SAACC,EAAKa,GAAN,OAAcA,GAAOD,QA9C/C,EA0DbE,OAAS,SAACD,GACN,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKT,MAAMX,QACpDiB,EAASF,GAAOZ,MAAQc,EAASF,GAAOZ,KACxC,EAAKM,SAAS,CACVT,MAAOiB,KA9DF,EAiEbX,YAAc,SAACH,GACX,OAAO,EAAKQ,MAAMX,MAAMqB,KAAI,SAACC,EAAKR,GAC9B,GAAGX,GAAMmB,EAAKnB,KACV,OAAO,4BACH,2BACIP,QAAS,kBAAI,EAAKoB,OAAOF,IACzBS,QAASpB,EACTV,KAAK,aAET,0BAAM+B,wBAAyB,CAACC,OAAOH,EAAKV,SAC5C,4BACIhB,QAAS,kBAAI,EAAKiB,QAAQC,KAD9B,qBAzEZ,EAAKH,MAAQ,CACTnB,SAAU,GACVQ,MAAM,IAJD,E,gEAYT,IAAIA,EAAQ0B,aAAaC,QAAQ,SAC9B3B,GACCV,KAAKmB,SAAS,CACVT,MAAOkB,KAAKC,MAAMnB,O,2CAK1B0B,aAAaE,QACT,QACAV,KAAKE,UAAU9B,KAAKqB,MAAMX,U,+BA8DxB,IAAD,EAEoBV,KAAKqB,MAAvBX,EAFF,EAEEA,MAAMR,EAFR,EAEQA,SAGb,OACI,yBAAKqC,UAAU,OAYX,kBAAC,EAAD,CAAOrC,SAAUA,EAAUK,QAASP,KAAKO,QAASF,aAAcL,KAAKK,eACrE,kBAAC,EAAD,CAAMK,MAAOA,EAAOM,YAAahB,KAAKgB,mB,GAxG/BvB,aCIvB+C,IAASC,OAET,kBAAC,EAAD,MAEEC,SAASC,eAAe,W","file":"static/js/main.6ca5b3c4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst context=React.createContext();\r\n\r\nexport default context;","import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"inp\">todolist</label>\r\n                <input \r\n                    id='inp'\r\n                    ref={inp=>this.input = inp}\r\n                    value={this.props.inpValue} \r\n                    type=\"text\" \r\n                    onChange={this.props.handleChange}\r\n                />\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Input","import React, { Component } from 'react';\r\n\r\n\r\n\r\n// 组件名首字母一定要大写\r\nclass Control extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        // this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue==''){\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n        this.setState({inpValue:''})\r\n\r\n    }\r\n    delTodo = (idx)=>{\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        // newTodos.splice(idx,1);\r\n        // this.setState({todos:newTodos});\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        });\r\n        // setState 是异步执行的，注意callback的用法\r\n        // this.setState({\r\n        //     todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        // },()=>{\r\n        //     localStorage.setItem(\r\n        //         'todos',\r\n        //         JSON.stringify(this.state.todos)\r\n        //     )\r\n        // });\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick={()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button \r\n                        onClick={()=>this.delTodo(idx)}\r\n                    >\r\n                        删除\r\n                    </button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        \r\n        const {todos,inpValue} = this.state;\r\n        let arr1 = todos.filter( item => !item.done)\r\n        let arr2 = todos.filter( item => item.done)\r\n        // console.log(arr1);\r\n        return (\r\n            <div className=\"box\">\r\n                <label htmlFor=\"inp\">todolist</label>\r\n                <input \r\n                    id='inp'\r\n                    ref={inp=>this.input = inp}\r\n                    value={inpValue} \r\n                    type=\"text\" \r\n                    onChange={this.handleChange}\r\n                />\r\n                <button onClick={this.addTodo}>添加</button>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul style={{color:3<2?'red':'green'}}>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;","import React, { Component } from 'react'\r\n\r\nexport default class List extends Component {\r\n    render() {\r\n        let arr1 = this.props.todos.filter( item => !item.done)\r\n        let arr2 = this.props.todos.filter( item => item.done)\r\n        return (\r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Input from \"./Input\"\r\nimport List from \"./List\"\r\n\r\n\r\n// 组件名首字母一定要大写\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        // this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue==''){\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n        this.setState({inpValue:''})\r\n\r\n    }\r\n    delTodo = (idx)=>{\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        // newTodos.splice(idx,1);\r\n        // this.setState({todos:newTodos});\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        });\r\n        // setState 是异步执行的，注意callback的用法\r\n        // this.setState({\r\n        //     todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        // },()=>{\r\n        //     localStorage.setItem(\r\n        //         'todos',\r\n        //         JSON.stringify(this.state.todos)\r\n        //     )\r\n        // });\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick={()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button \r\n                        onClick={()=>this.delTodo(idx)}\r\n                    >\r\n                        删除\r\n                    </button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        \r\n        const {todos,inpValue} = this.state;\r\n\r\n        // console.log(arr1);\r\n        return (\r\n            <div className=\"box\">\r\n\r\n\r\n                {/* <label htmlFor=\"inp\">todolist</label>\r\n                <input \r\n                    id='inp'\r\n                    ref={inp=>this.input = inp}\r\n                    value={inpValue} \r\n                    type=\"text\" \r\n                    onChange={this.handleChange}\r\n                />\r\n                <button onClick={this.addTodo}>添加</button> */}\r\n                <Input inpValue={inpValue} addTodo={this.addTodo} handleChange={this.handleChange}/>\r\n                <List todos={todos} renderTodos={this.renderTodos}/>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, { createContext } from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './pages/app';\n// import Hoc,{Detail} from './pages/hoc'\nimport Hook from './pages/Hook'\nimport Context from './pages/context'\nimport Control from './components/control'\nimport TodoList from './xueli0930/TodoList'\n\n\nReactDOM.render(\n  // <Context.Provider value='123'> <Hook/></Context.Provider>,\n<TodoList/>,\n  \n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\n\n\n//const List = (props)=>{\n// alt shift + 上下键   复制一行\n// alt + 上下键         移动一行\n// 按住alt ，鼠标点击\n// Ctrl + shift + 左右键，选中整个单词\n// ctrl+shift+L \n\n\n\n\n// const Buttons = ()=>{\n//   const btns = [1,2,3,4,5];\n//   return <div>\n//     {\n//       btns.map((item)=><button>{item}</button>)\n//     }\n//   </div>\n// }\n\n\n\n// let ele = <h1 id = \"title\" className = \"tit\" >\n//     <div > hello </div>\n//     react\n//     </h1>;\n// console.log(ele)\n\n// let ReactDOM = {\n//     render(eleObj, container) {\n//         //解构\n//         const { type, props } = eleObj;\n//         //创建第一层结点\n//         let ele = document.createElement(type);\n//             //遍历属性对象，将属性添加到第一层节点对象\n//             for (const prop in props) {\n//                 // if(prop==\"classname\"){\n//                 //     ele.setAttribute(\"class\",props[prop]);\n//                 // }\n//                 if (prop == \"children\") {\n//                     //将第一层节点对象的子元素添加进去\n//                     props.children.forEach((child) => {\n//                             if (typeof child == \"string\") {\n//                                     const txtNode = document.createTextNode(props[prop]);\n//                                     ele.appendChild(txtNode);\n//                                 }else{\n//                                     ReactDOM.render(child, ele);\n//                                 }\n//                             })\n//                     }else {\n                        \n//                         ele[prop] = props[prop];\n//                     }\n//                 }\n//                 //将第一层DOM节点添加到container中\n//                 container.appendChild(ele);\n//             }\n//     }\n\n\n\n\n//组件声明\n//函数组件\n//UI（展示）组件\n// function App(props){\n//     const{title,id}=props;\n//     return<div>\n//         <App/>\n//         <div>{title}</div>\n// <div>{id}</div>\n//     </div>\n// }\n\n// //智能组件\n// class Demo extends React.Component{\n//     constructor(){\n//         super();\n//         //声明状态\n//         this.state={\n//             name:new Date().toLocaleString\n//         }\n//         setInterval(() => {\n            \n//         }, 1000);(()=>{\n//             this.setState({name:new Date().toLocaleString\n//         },3000);\n//     }\n//     render(){\n//         return <div>\n//             <div>name:{this.state.name}</div>\n//             <App title=\"abc\" id=\"app\"/ >\n//             <App title=\"abc\" id=\"app\"/ >\n//         </div>\n//     }\n// }"],"sourceRoot":""}